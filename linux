Linux Account discovery characteristics
-The tool exclusively accommodates password-based authentication for Unix-based systems. Consequently, a scanning account with identical usernames and passwords must be established on a substantial number of hosts within the Linux infrastructure in order to retrieve the necessary data.  
-In a large and evolving environment, automating Linux scanning is not feasible; it must be performed manually. This is due to a combination of factors:
Lack of API Support for the Linux Scanning Module: Unfortunately, the Linux scanning module lacks API support, making full automation impossible.
Limitations in PVWA Portal Configuration: While it is possible to configure recurring scans in the PVWA portal, certain constraints making impossible complete automation:
CSV-Based Host List: The list of intended hosts for scanning is based on a flat CSV file. Consequently, whenever a new server is created or an old one is removed, the corresponding CSV file must be updated manually.
Vaulted Account Selection: Unlike Windows scans, selecting a scanning account from vaulted accounts is not possible for Linux scans. As a result, the password for these accounts must be manually updated in the scanning engine every time it changes. This is particularly crucial when an organization aims to implement the credential boundary principle, as it requires the creation of multiple scanning accounts, all of which require manual maintenance.
-Lack of any customization of discovered account inventory. 
-A limited number of cryptographic protocols are available for SSH session establishment.
Other observations
The same audit data can be easily fetched by already established Puppet solution. CyberArk scanning module simply does few things. 
Gathers all users configured all Unix virtual machine.
Check which of them are added sudo permission.
Check user’s ~/home/<username>/.ssh/authorized_keys to find which users has 
All the above things are easily configurable in the Puppet module.
-The general rule is that it is much easier to gather audit data using an agent-based solution than using a solution that collects audit data via a network connection. The reason for this is that the agent has some awareness of the host’s status. For example, consider a scenario where a host is temporarily turned off. In the case of an agent-based solution, the data will be gathered as soon as the host comes back online. However, with a network-based scan, you would need to wait for the next scanning interval.
Summary
Given the limitations, implementing this module may pose challenges but remains possible. However, from an automation perspective, with extended capabilities and enhanced reliability, building such a mechanism on a Puppet solution appears to be considerably more efficient.
